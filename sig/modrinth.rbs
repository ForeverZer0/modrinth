# 
# Top-level namespace for the Modrinth API.
module Modrinth
  VERSION: String

  # Gets an array of categories, their icons, and applicable project types.
  # 
  # _@return_ — the array of supported categories.
  # 
  # _@see_ `Project::TYPES`
  def self.categories: () -> ::Array[Category]

  # Gets an array of loaders, their icons, and supported project types.
  # 
  # _@return_ — the array of supported loaders.
  # 
  # _@see_ `Project::TYPES`
  def self.loaders: () -> ::Array[Loader]

  # Gets an array of game versions and information about them.
  # 
  # _@return_ — the array of supported game versions.
  def self.game_versions: () -> ::Array[GameVersion]

  # Gets an array of licenses and information about them.
  # 
  # _@return_ — the array of known licenses.
  def self.licenses: () -> ::Array[License]

  # Gets an array of donation platforms and information about them.
  # 
  # _@return_ — an array of supported donation platforms.
  def self.donation_platforms: () -> ::Array[DonationPlatform]

  # _@return_ — an array of valid report types.
  def self.report_types: () -> ::Array[String]

  # Performs a search query of the Modrinth modding platform.
  # 
  # _@param_ `query` — The query string to seach for.
  # 
  # _@param_ `page_size` — The page size for paginated results.
  # 
  # _@param_ `options` — The options hash.
  # 
  # _@return_ — a {Search} object that can be enumerated for search results.
  def self.search: (?String? query, ?Integer page_size, **::Hash[Symbol, Object] options) -> Search

  # Retrieves a {Project} with the specified ID or _slug_.
  # 
  # _@param_ `id_or_slug` — The unique ID or vanity slug associated with the project.
  # 
  # _@return_ — the specified {Project}, or `nil` if an error occurred or project was not found.
  def self.project: (String id_or_slug) -> Project?

  # _@return_ — the SVG icon of a loader.
  attr_reader icon: String

  # _@return_ — the name of the loader.
  attr_reader name: String

  # _@return_ — the project types that this loader is applicable to.
  # 
  # _@see_ `Project::TYPES`
  attr_reader project_type: ::Array[Symbol]

  # 
  # Describes categories that projects can be classified with.
  # 
  # @attribute [r] icon
  #   @return [String] the SVG icon of a category.
  # @attribute [r] name
  #   @return [String] the name of the category.
  # @attribute [r] project_type 
  #   @return [Symbol] the project type this category is applicable to.
  #   @see Project::TYPES
  # @attribute [r] header 
  #   @return [String] the header under which the category should go.
  class Category < Struct
    # _@return_ — the SVG icon of a category.
    attr_reader icon: String

    # _@return_ — the name of the category.
    attr_reader name: String

    # _@return_ — the project type this category is applicable to.
    # 
    # _@see_ `Project::TYPES`
    attr_reader project_type: Symbol

    # _@return_ — the header under which the category should go.
    attr_reader header: String
  end

  # 
  # Describes mod-loaders supported by the API.
  # 
  # @attribute [r] icon
  #   @return [String] the SVG icon of a loader.
  # @attribute [r] name
  #   @return [String] the name of the loader.
  # @attribute [r] project_type 
  #   @return [Array<Symbol>] the project types that this loader is applicable to.
  #   @see Project::TYPES
  class Loader < Struct
    # _@return_ — the SVG icon of a loader.
    attr_reader icon: String

    # _@return_ — the name of the loader.
    attr_reader name: String

    # _@return_ — the project types that this loader is applicable to.
    # 
    # _@see_ `Project::TYPES`
    attr_reader project_type: ::Array[Symbol]

    # Returns the value of attribute project_types
    attr_accessor project_types: Object
  end

  # 
  # Describes Minecraft game versions.
  # 
  # @attribute [r] version
  #   @return [String] the name/number of the game version.
  # @attribute [r] version_type
  #   The type of the game version. Valid values include:
  #     * `:release`
  #     * `:snapshot`
  #     * `:alpha`
  #     * `:beta`
  #   @return [Symbol] the type of the game version. 
  # @attribute [r] date
  #   @return [DateTime] the date of the game version release.
  # @attribute [r] major
  #   @return [Boolean] flag indicating whether or not this is a major version, used for Featured Versions.
  class GameVersion < Struct
    # _@return_ — the name/number of the game version.
    attr_reader version: String

    # The type of the game version. Valid values include:
    #   * `:release`
    #   * `:snapshot`
    #   * `:alpha`
    #   * `:beta`
    # 
    # _@return_ — the type of the game version.
    attr_reader version_type: Symbol

    # _@return_ — the date of the game version release.
    attr_reader date: DateTime

    # _@return_ — flag indicating whether or not this is a major version, used for Featured Versions.
    attr_reader major: bool
  end

  # 
  # Describes a license for a project.
  # 
  # @attribute [rw] id
  #   @return [String] the short identifier of the license.
  # @attribute [rw] name
  #   @return [String] the full name of the license.
  # @attribute [rw] url
  #   @return [String,nil] the optional URL to the license.
  class License < Struct
    # _@return_ — the short identifier of the license.
    attr_accessor id: String

    # _@return_ — the full name of the license.
    attr_accessor name: String

    # _@return_ — the optional URL to the license.
    attr_accessor url: String?
  end

  # 
  # Describes a supported donation platform for a project.
  # 
  # @attribute [rw] id
  #   @return [String] the short identifier of the donation platform.
  # @attribute [rw] name
  #   @return [String] the full name of the donation platform.
  # @attribute [rw] url
  #   @return [String,nil] the optional URL to the donation platform.
  class DonationPlatform < Struct
    # _@return_ — the short identifier of the donation platform.
    attr_accessor id: String

    # _@return_ — the full name of the donation platform.
    attr_accessor name: String

    # _@return_ — the optional URL to the donation platform.
    attr_accessor url: String?
  end

  # 
  # Describes a moderator message.
  # 
  # @attribute [r] message
  #   @return [String] the message that a moderator has left for the project.
  # @attribute [r] body
  #   @return [String,nil] the longer body of the message that a moderator has left for the project.
  class ModeratorMessage < Struct
    # _@return_ — the message that a moderator has left for the project.
    attr_reader message: String

    # _@return_ — the longer body of the message that a moderator has left for the project.
    attr_reader body: String?
  end

  # 
  # @api private
  # Utility module provideing methods for interacting with the remote Modrinth API.
  module Net
    HEADERS: ::Hash[String, String]
    BASE_URL: String

    # Calculates the digest of a file with 160 bits.
    # 
    # _@param_ `filename` — the path to the file to calculate the checksum of.
    # 
    # _@return_ — the 20-byte checksum of the file.
    def self.sha1: (String filename) -> String

    # Calculates the digest of a file with chunks of 1024 bits.
    # 
    # _@param_ `filename` — the path to the file to calculate the checksum of.
    # 
    # _@return_ — the 512-bit checksum of the file.
    def self.sha512: (String filename) -> String

    # Executes a GET request with the given parameters.
    # 
    # _@param_ `method` — The remote endpoint for the method to call.
    # 
    # _@param_ `params` — A hash containing the REST query.
    # 
    # _@return_ — the JSON response, or `nil` if a non-successful response was returned.
    # 
    # _@note_ — The rate limit is tracked internally and updated with each call from the response headers.
    def self.get: (String method, ?::Hash[untyped, untyped]? params) -> ::Hash[Symbol, Object]?

    # Executes a POST request with the given parameters.
    # 
    # _@param_ `method` — The remote endpoint for the method to call.
    # 
    # _@param_ `params` — A hash containing the REST query.
    # 
    # _@param_ `payload` — A hash containing the JSON payload defining the message body.
    # 
    # _@return_ — the JSON response, or `nil` if a non-successful response was returned.
    # 
    # _@note_ — The rate limit is tracked internally and updated with each call from the response headers.
    def self.post: (String method, ::Hash[untyped, untyped] params, ::Hash[untyped, untyped] payload) -> ::Hash[Symbol, Object]?

    # Updates the rate limit.
    # 
    # _@param_ `response` — The response object returned by the API call.
    def self.update_rates: (::Net::HTTPResponse response) -> void

    # 
    # Describes the rate-limit for calls to the Modrinth API.
    # 
    # @note The rate limit for all users of the API is currently `300` per minute. 
    #   If you have a use case requiring a higher limit, please [contact Modrinth](mailto:admin@modrinth.com).
    # 
    # @attribute [r] limit 
    #   @return [Integer] the maximum number of requests that can be made in a minute.
    # @attribute [r] remaining
    #   @return [Integer] the number of requests remaining in the current ratelimit window.
    # @attribute [r] reset 
    #   @return [Integer] the time in seconds until the ratelimit window resets.
    class RateLimit < Struct
      # _@return_ — the maximum number of requests that can be made in a minute.
      attr_reader limit: Integer

      # _@return_ — the number of requests remaining in the current ratelimit window.
      attr_reader remaining: Integer

      # _@return_ — the time in seconds until the ratelimit window resets.
      attr_reader reset: Integer
    end
  end

  # 
  # Describes an optimized filter for search results that uses a limited set of criteria.
  class Facet
    TYPES: ::Array[Symbol]

    # Initializes a new instance of the {Facet} class.
    # 
    # _@param_ `type` — Describes the facet type, which must be one of the following:  | Type            | Description | | :---            | :---        | | `:categories`   | The loader or category to filter the results from. | `:version`      | The Minecraft version to filter the results from. | `:license`      | The license ID to filter the results from. | `:project_type` | The project type to filter the results from.
    # 
    # _@param_ `value`
    # 
    # _@see_ `TYPES`
    def initialize: ((Symbol | String) _type, (String | Symbol) value) -> void

    # Retrieves a {String} that describes the facet.
    # 
    # _@return_ — the {String} representation of the facet.
    def to_s: () -> String

    # Retrieves the {Facet} represented in JavaScript Object Notation (JSON).
    # 
    # _@param_ `options` — Options for generated JSON. Unused.
    # 
    # _@return_ — the {Facet} as a JSON string.
    def to_json: (?Symbol? options) -> String

    # Parses a new {Facet} from the specified _string_.
    # 
    # _@param_ `string` — The {String} to parse.
    # 
    # _@return_ — a new {Facet} instance of `nil` if parsing failed.
    def self.parse: (String string) -> Facet?

    # Convenience method to create one or more category facets.
    # 
    # _@param_ `values` — The value(s) to be created.
    # 
    # _@return_ — when _values_ is a single string, returns the newly created {Facet},
    # otherwise returns an array of the facets when multiple values are given.
    def self.categories: (*(String | ::Array[String]) values) -> (Facet | ::Array[Facet])

    # Convenience method to create one or more version facets.
    # 
    # _@param_ `values` — The value(s) to be created.
    # 
    # _@return_ — when _values_ is a single string, returns the newly created {Facet},
    # otherwise returns an array of the facets when multiple values are given.
    def self.versions: (*(String | ::Array[String]) values) -> (Facet | ::Array[Facet])

    # Convenience method to create one or more license facets.
    # 
    # _@param_ `values` — The value(s) to be created.
    # 
    # _@return_ — when _values_ is a single string, returns the newly created {Facet},
    # otherwise returns an array of the facets when multiple values are given.
    def self.license: (*(String | ::Array[String]) values) -> (Facet | ::Array[Facet])

    # Convenience method to create one or more project type facets.
    # 
    # _@param_ `values` — The value(s) to be created.
    # 
    # _@return_ — when _values_ is a single string, returns the newly created {Facet},
    # otherwise returns an array of the facets when multiple values are given.
    def self.project_type: ((String | ::Array[String]) values) -> (Facet | ::Array[Facet])

    # Creates multiple instances of the specified type.
    # 
    # _@param_ `facet_type` — The type of facet to create.
    # 
    # _@param_ `values` — The values of the facets.
    # 
    # _@return_ — The newly created facet(s).
    def self.create: (Symbol facet_type, ::Array[String] values) -> (Facet | ::Array[Facet])

    # _@return_ — The facet type.
    # 
    # _@see_ `TYPES`
    attr_reader type: Symbol

    # _@return_ — The value of the facet.
    attr_reader value: String
  end

  class Filter
  end

  # 
  # Represents a search query with support for pagination.
  # 
  # Uses lazy-loading to only execute the API call when results are actually queried, not
  # when the {Search} object is initialized. Each page of results is cached internally,
  # meaning subsequent calls to the same page from a {Search} will not result in multiple
  # API calls or count against the [limit](https://docs.modrinth.com/api-spec/#section/Ratelimits) 
  # enforced by Modrinth.
  # 
  # @example Pagination and Caching
  #   search = Search.new('shaders', 20, facets: Facet.new(:versions, '1.19.2'))
  #   
  #   # First API call
  #   result_array = search.page(0)
  # 
  #   # Second API call
  #   result_array = search.page(1)
  # 
  #   # No API call, returns cached results from previous invocation
  #   result_array = search.page(0)
  # 
  # @note While this class uses {Enumerable} as a mixin for convenience, consideration must be made
  #   for the {#each} method and any method supplied by {Enumerable}, as it will typically make
  #   multiple API calls for each "page" of results. This happens transparently to the user, but
  #   depending on the number of results returned by a query, could even overcome the rate limit. 
  #   If you know that you will be iterating through all results, use a larger {#page_size} during
  #   initialization to mitigate the number of remote invocations.
  class Search
    include Enumerable
    INDICES: ::Array[Symbol]

    # Initializes a new instance of the {Search} class.
    # 
    # _@param_ `query` — The query string to seach for.
    # 
    # _@param_ `page_size` — The page size for paginated results.
    # 
    # _@param_ `params` — JSON objects representing the object.
    def initialize: (?String? query, ?Integer page_size, **::Hash[Symbol, Object] params) -> void

    # The total number of search results.
    # 
    # _@return_ — the total number of results, or `-1` if no API call has yet been made.
    def size: () -> Integer

    # Iterates through the results of the query.
    # 
    # _@note_ — While this class uses {Enumerable} as a mixin for convenience, consideration must be made
    # for the {#each} method and any method supplied by {Enumerable}, as it will typically make
    # multiple API calls for each "page" of results. This happens transparently to the user, but
    # depending on the number of results returned by a query, could even overcome the rate limit. 
    # If you know that you will be iterating through all results, use a larger {#page_size} during
    # initialization to mitigate the number of remote invocations.
    # 
    # _@see_ `each_page`
    def each: () -> untyped

    # Retrieves the search resuls for the specified page.
    # 
    # _@param_ `index` — the zero-based index of the page to retrieve.
    # 
    # _@return_ — the search results for the page.
    # 
    # _@note_ — The size of the returned array will not exceed the value of {#page_size}.
    # 
    # _@see_ `each_page`
    def page: (Integer index) -> ::Array[SearchResult]

    # Iterates through each page of results, returing each page as a an {Array} of {SearchResult} objects.
    # 
    # _@note_ — The size of the _results_ array will not exceed the value of {#page_size}.
    # 
    # _@see_ `page`
    # 
    # _@see_ `each`
    def each_page: () -> untyped

    # Parses facet values.
    # 
    # _@param_ `value` — The {Facet} value.
    def parse_facets: ((::Array[Facet] | Facet | String) value) -> ::Array[Facet]

    # Parses filter values.
    # 
    # _@param_ `value` — The {Filter} value.
    def parse_filters: ((::Array[Filter] | Filter | String) value) -> ::Array[Facet]

    # Executes the `/search` API call, and returns the results as a JSON object.
    # 
    # _@param_ `offset` — the offset into results to begin the query.
    # 
    # _@return_ — the JSON results.
    def call: (Integer offset) -> ::Hash[Symbol, Object]?

    # _@return_ — the search query.
    attr_accessor query: String

    # An array containing optimized filters for search results.
    # 
    # Facets use `AND/OR` logic depending on how the array is configured.
    # All elements in a single array **after the first one** are considered in a single `OR` block. 
    # All arrays in the top-level one are considered in a single `AND` block.
    # 
    # OR
    # ```ruby
    # # Translates to "Projects that supports 1.18.1 OR 1.19.2"
    # search.facets << [Facet.new(:versions, '1.18.1'), Facet.new(:versions, '1.19.2')]
    # ```
    # 
    # AND
    # ```ruby
    # # Translates to "Projects that support 1.16.5 AND are modpacks" 
    # search.facets << [Facet.new(:versions, '1.16.5')]
    # search.facets << [Facet.new(:project_type, :modpack)]
    # ```
    # 
    # _@see_ `https://docs.modrinth.com/docs/tutorials/api_search/#facets`
    attr_reader facets: ::Array[::Array[Facet]]

    # An array containing the filters for search results.
    attr_reader filters: ::Array[Filter]

    # _@return_ — a {Symbol} describing the sorting method for results.
    # 
    # _@see_ `INDICES`
    attr_reader index: Symbol

    # _@return_ — the number of results returned per "page".
    # 
    # _@see_ `page`
    # 
    # _@see_ `each_page`
    attr_reader page_size: Integer
  end

  # 
  # Projects can be mods or modpacks and are created by users.
  class Project
    SLUG_PATTERN: Regexp
    TYPES: ::Array[Symbol]
    SUPPORT: ::Array[Symbol]
    STATUS: ::Array[Symbol]

    # Initializes a new instance of the {Project} class.
    # 
    # _@param_ `params` — JSON objects representing the object.
    def initialize: (**::Hash[Symbol, Object] params) -> void

    # Asserts a the specified support _value_ is valid and returns it as a {Symbol}.
    # 
    # _@param_ `value` — The value to validate.
    # 
    # _@return_ — the value as a Symbol.
    def assert_support: ((Symbol | String) value) -> Symbol

    # Returns the value of attribute slug.
    attr_accessor slug: String

    # _@return_ — the title or name of the project.
    attr_accessor title: String

    # _@return_ — a short description of the project.
    attr_accessor description: String

    # _@return_ — a list of the categories that the project has.
    attr_reader categories: ::Array[String]

    # A {Symbol} describing the the client side support of the project.
    # 
    # _@return_ — the client-side support value.
    # 
    # _@see_ `server_side`
    # 
    # _@see_ `SUPPORT`
    attr_accessor client_side: Symbol

    # A {Symbol} describing the the server side support of the project.
    # 
    # _@return_ — the server-side support value.
    # 
    # _@see_ `client_side`
    # 
    # _@see_ `SUPPORT`
    attr_accessor server_side: Symbol

    # _@return_ — the long form description of the project.
    attr_accessor body: String

    # _@return_ — the project type of the project.
    # 
    # _@see_ `TYPES`
    attr_accessor type: Symbol

    # _@return_ — the total number of downloads of the project.
    attr_reader downloads: Integer

    # _@return_ — the ID of the project, encoded as a base62 string.
    attr_reader id: String

    # _@return_ — the URL of the project's icon.
    attr_reader icon_url: String?

    # _@return_ — the total number of users following the project.
    attr_reader followers: Integer

    # _@return_ — the status of the project.
    # 
    # _@see_ `STATUS`
    attr_reader status: Symbol

    # _@return_ — the date the project was published.
    attr_reader published: DateTime

    # _@return_ — the date the project was last updated.
    attr_reader updated: DateTime

    # _@return_ — the date the project's status was set to approved or unlisted.
    attr_reader approved: DateTime

    # _@return_ — a list of the version IDs of the project (will never be empty unless `draft` status).
    attr_reader versions: ::Array[String]

    # _@return_ — the license of the project.
    # 
    # _@note_ — When a {String} is supplied, a license with a matching ID or name is searched for.
    # 
    # _@see_ `Modrinth.licenses`
    attr_accessor license: (License | String)

    # _@return_ — an optional invite link to the project's Discord.
    attr_accessor issues_url: String?

    # _@return_ — an optional link to the source code of the project.
    attr_accessor source_url: String?

    # _@return_ — an optional link to the project's wiki page or other relevant information.
    attr_accessor wiki_url: String?

    # _@return_ — a list of donation links for the project.
    attr_reader donations: ::Array[DonationPlatform]

    # _@return_ — a message that a moderator sent regarding the project.
    attr_reader moderator_message: ModeratorMessage?

    # _@return_ — a list of categories which are searchable but non-primary.
    attr_reader additional_categories: ::Array[::Array[String]]

    # _@return_ — the ID of the team that has ownership of this project.
    attr_accessor team: String

    # _@return_ — a list of images that have been uploaded to the project's gallery.
    attr_reader gallery: ::Array[Project::Image]

    # 
    # Describes a gallery image that was uploaded to a {Project}.
    # 
    # @attribute [r] url
    #   @return [String] the URL of the gallery image.
    # @attribute [r] featured
    #   @return [Boolean] a flag indicating whether the image is featured in the gallery.
    # @attribute [r] title
    #   @return [String,nil] the optional title of the gallery image.
    # @attribute [r] description
    #   @return [String,nil] the optional description of the gallery image.
    # @attribute [r] created
    #   @return [DateTime] the date and time the gallery image was created.
    class Image < Struct
      # _@return_ — the URL of the gallery image.
      attr_reader url: String

      # _@return_ — a flag indicating whether the image is featured in the gallery.
      attr_reader featured: bool

      # _@return_ — the optional title of the gallery image.
      attr_reader title: String?

      # _@return_ — the optional description of the gallery image.
      attr_reader description: String?

      # _@return_ — the date and time the gallery image was created.
      attr_reader created: DateTime
    end
  end

  # 
  # Describes a specific version of a {Project} and its content.
  class Version
    # Initializes a new instance of the {Version} class.
    # 
    # _@param_ `params` — JSON objects representing the object.
    def initialize: (**::Hash[Symbol, Object] params) -> void

    # Downloads the file(s) associated with this version to the specified _directory_.
    # 
    # _@param_ `directory` — The output directory where the file(s) will be saved.
    # 
    # _@return_ — the number of files written.
    def download: (?String directory) -> Integer

    # _@return_ — the name of this version.
    attr_reader name: String

    # _@return_ — the version number. Ideally will follow semantic versioning.
    attr_reader version_number: String

    # _@return_ — the changelog for this version.
    attr_reader changelog: String?

    # _@return_ — a list of specific versions of projects that this version depends on.
    attr_reader dependencies: ::Array[Dependency]

    # _@return_ — a list of versions of Minecraft that this version supports.
    attr_reader game_versions: ::Array[String]

    # The release channel for this version. Valid values include:
    # * `:release`
    # * `:beta`
    # * `:alpha`
    # 
    # _@return_ — the release channel for this version.
    attr_reader version_type: Symbol

    # _@return_ — the mod loaders that this version supports.
    attr_reader loaders: ::Array[String]

    # _@return_ — a flag indicating whether the version is featured or not.
    attr_reader featured: bool

    # _@return_ — the ID of the version, encoded as a base62 string.
    attr_reader id: String

    # _@return_ — the ID of the project this version is for.
    attr_reader project_id: String

    # _@return_ — the ID of the author who published this version.
    attr_reader author_id: String

    # _@return_ — the date the version was published.
    attr_reader published: DateTime

    # _@return_ — the number of times this version has been downloaded.
    attr_reader downloads: Integer

    # _@return_ — a list of files available for download for this version.
    attr_reader files: ::Array[String]

    # 
    # Describes dependencies of a specific version of a project.
    # 
    # @attribute [r] version_id
    #   @return [String,nil] the ID of the version that this version depends on.
    # @attribute [r] project_id
    #   @return [String,nil] the ID of the project that this version depends on.
    # @attribute [r] filename
    #   @return [String] the file name of the dependency, mostly used for showing external dependencies on modpacks.
    # @attribute [r] type
    #   The type of dependency that this version has. Valid values include:
    #   * `:required`
    #   * `:optional`
    #   * `:incompatible`
    #   * `:embedded`
    #   @return [Symbol] the type of dependency that this version has.
    class Dependency < Struct
      # _@return_ — the ID of the version that this version depends on.
      attr_reader version_id: String?

      # _@return_ — the ID of the project that this version depends on.
      attr_reader project_id: String?

      # _@return_ — the file name of the dependency, mostly used for showing external dependencies on modpacks.
      attr_reader filename: String

      # The type of dependency that this version has. Valid values include:
      # * `:required`
      # * `:optional`
      # * `:incompatible`
      # * `:embedded`
      # 
      # _@return_ — the type of dependency that this version has.
      attr_reader type: Symbol
    end

    # 
    # Describes a resource file for a project.
    # 
    # @attribute [r] sha1
    #   @return [String] the SHA1 hash for the file.
    # @attribute [r] sha256
    #   @return [String] the SHA256 hash for the file.
    # @attribute [r] url
    #   @return [String] a direct link to the file.
    # @attribute [r] filename
    #   @return [String] the name of the file.
    # @attribute [r] primary
    #   @return [Boolean] a flag indicating whether this is the primary file.
    # @attribute [r] size
    #   @return [Integer] the size of the file in bytes.
    class File < Struct
      # Downloads the file to the specified direcory and validates it checksum.
      # 
      # _@param_ `directory` — the output directory where the file will be written to.
      # 
      # _@return_ — the number of bytes written.
      def download: (?String directory) -> Integer

      # _@return_ — the SHA1 hash for the file.
      attr_reader sha1: String

      # _@return_ — the SHA256 hash for the file.
      attr_reader sha256: String

      # _@return_ — a direct link to the file.
      attr_reader url: String

      # _@return_ — the name of the file.
      attr_reader filename: String

      # _@return_ — a flag indicating whether this is the primary file.
      attr_reader primary: bool

      # _@return_ — the size of the file in bytes.
      attr_reader size: Integer
    end
  end

  # 
  # Describes a single project result in a {Search} query.
  class SearchResult
    # Initializes a new instance of the {SearchResult} class.
    # 
    # _@param_ `params` — JSON objects representing the object.
    def initialize: (**::Hash[Symbol, Object] params) -> void

    # _@return_ — the {String} representation of the {SearchResult}.
    def to_s: () -> String

    # Compares equality of this {SearchResult} with another object.
    # 
    # _@param_ `other` — The object insatnce to compare for equality.
    # 
    # _@return_ — `true` if _other_ is a {SearchResult} with the same ID, otherwise `false`.
    def ==: (Object? other) -> bool

    # _@return_ — the slug of a project, used for vanity URLs.
    # 
    # _@see_ `SLUG_PATTERN`
    attr_reader slug: String

    # _@return_ — the title or name of the project.
    attr_reader title: String

    # _@return_ — a short description of the project.
    attr_reader description: String

    # _@return_ — a list of the categories that the project has.
    attr_reader categories: ::Array[String]

    # _@return_ — a {Symbol} describing the server side support of the project.
    # 
    # _@see_ `Project::SUPPORT`
    attr_reader client_side: Symbol

    # _@return_ — a {Symbol} describing the project type of the project.
    # 
    # _@see_ `Project::TYPES`
    attr_reader project_type: Symbol

    # _@return_ — the total number of downloads of the project.
    attr_reader downloads: Integer

    # _@return_ — the URL of the project's icon.
    attr_reader icon_url: String?

    # _@return_ — the ID of the project.
    attr_reader project_id: String

    # _@return_ — the username of the project's author.
    attr_reader author: String

    # _@return_ — a list of the categories that the project has which are not secondary.
    attr_reader display_categories: ::Array[String]

    # _@return_ — a list of the Minecraft versions supported by the project.
    attr_reader versions: ::Array[String]

    # _@return_ — the total number of users following the project.
    attr_reader follows: Integer

    # _@return_ — the date the project was added to search.
    attr_reader date_created: String

    # _@return_ — the date the project was last modified.
    attr_reader date_modified: String

    # _@return_ — the latest version of minecraft that this project supports.
    # 
    # _@note_ — Value may be `nil` when project is in `draft` status.
    attr_reader latest_version: String?

    # _@return_ — the license of the project.
    attr_reader license: String

    # _@return_ — all gallery images attached to the project.
    attr_reader gallery: ::Array[String]
  end
end